#! /usr/bin/env python

import unittest
import subprocess
import os
from os import path


class TestAllCrashes(unittest.TestCase):

    def test_runs(self):

        root_cw = path.abspath("tests/crashwrangler/bin")
        self.assertTrue(path.exists(root_cw), "Unable to read crashwrangler binary tests. Did you run 'make tests'?")
        tests = map(lambda p: path.join(root_cw, p), os.listdir(root_cw))
        root_ex = path.abspath("tests/exploitable/bin")
        self.assertTrue(path.exists(root_ex), "Unable to read exploitable binary tests. Did you run 'make tests'?")
        tests.extend(map(lambda p: path.join(root_ex, p), os.listdir(root_ex)))

        skip = ["spin", "nocrash"]

        for t in tests:
            self.assertTrue(path.exists(t), "Internal error locating %s" % t)
            print "About to run %s" % t
            try:
                out = subprocess.check_output(["./exploitaben.py", "-t 3", t])
                if os.path.basename(t) in skip:
                    print "(not expecting output for %s)" % t
                    continue
                lines = out.split('\n')
                self.assertGreater(len(lines), 14, "Output too short.")
                self.assertIn('INDICATORS', lines[len(lines) - 15], "No INDICATORS mark.")
                print '\n'.join(lines[len(lines) - 13:])
            except subprocess.CalledProcessError as e:
                print "Error %s running %s" % (e.returncode, e.cmd)
                return False

        return True

if __name__ == '__main__':
    unittest.main()
